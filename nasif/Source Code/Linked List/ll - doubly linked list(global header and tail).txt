//linked list
//ll - doubly linked list(global header and tail)
//working fine
//xplo

#include<cstdio>
#include<iostream>
#include<cstdlib>
#include <cstring>
#include <cstdlib>
#include <conio.h>

#define max 100

using namespace std;


struct Node
{
    int data;
    Node* next;
    Node* prev;

};

Node* head;
Node* tail;


/*--------------- Prototype -----------------*/

void print_menu();
int input_int();
void insert_to_begining(int n);
void insert_to_end(int n);
void insert_to_a_position(int n,int pos);
void delete_from_begining();
void delete_from_end();
void delete_from_a_position(int pos);
void print();
void print_reverse_iterate();

/*------------------------------------------*/


int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    head=NULL;
    tail=NULL;

    int n,pos;


    //build a linked list
    insert_to_begining(1);
//    print();
//    print_reverse_iterate();

    insert_to_end(2);
    insert_to_end(3);
    insert_to_end(4);
    print();
    //print_reverse_iterate();


    //insert and delete

    cout << "insert to pos" << endl;
    insert_to_a_position(77,1);
    //insert_to_a_position(33,3);
    print();
    print_reverse_iterate();
    cout << "delete pos" << endl;
    delete_from_a_position(1);
    print();
    print_reverse_iterate();

    cout << "insert to beg" << endl;
    insert_to_begining(77);
    print();
    print_reverse_iterate();
    cout << "del form beg" << endl;
    delete_from_begining();
    print();
    print_reverse_iterate();

    cout << "insert to end" << endl;
    insert_to_end(77);
    print();
    print_reverse_iterate();
    cout << "delete from end" << endl;
    delete_from_end();
    print();
    print_reverse_iterate();



//    head = reverse_iterate();
//    print();

    //print_reverse_reccurssion();





//    while(true)
//    {
//        int m;
//        print_menu();
//
//        cin >> m;
//        cin.ignore(10,'\n');
//
//        system("cls");
//        switch(m)
//        {
//        case 1:
//            n = input_int();
//            //cout << n << endl;
//             insert_to_begining(n,head);
//            print();
//            break;
//
//        case 2:
//            n = input_int();
//            insert_to_end(n,head);
//            print();
//            break;
//
//        case 3:
//            cout << "Enter (integer:position) : ";
//            cin >> n >> pos;
//
//             insert_to_a_position(n,pos,head);
//            print();
//            break;
//
//        case 4:
//
//            head = delete_from_begining(head);
//            print();
//            break;
//        case 5:
//
//            delete_from_end(head);
//            print();
//            break;
//        case 6:
//            cout << "Enter position: ";
//            cin >> pos;
//            delete_from_a_position(pos,head);
//            print();
//            break;
//        case 7:
//            print();
//            break;
//
//        }
//
//        if(m==0)
//            break;
//
////        cout << "\n\tPress any key to continue... ";
////        getch();
////
////        system("cls");
//
//
//    }



    return 0;
}



void print_menu()
{
    cout << "\a\n";
    cout << "\n\t   | MENU";
    cout << "\n\t---|-----------";
    cout << "\n\t   |";

    cout << "\n\t\t1. Insert to Begining";
    cout << "\n\t\t2. Insert to End";
    cout << "\n\t\t3. Insert to a position";
    cout << "\n\t\t4. Delete from Begining";
    cout << "\n\t\t5. Delete from End";
    cout << "\n\t\t6. Delete from a position";
    cout << "\n\t\t7. Print the list";
    cout << "\n\t\t0. EXIT!!";

    cout << "\n\t\t\t       |";
    cout << "\n\t\t\t-------|---";
    cout << "\n\t\t\t       | ";
}


int input_int()
{
    int n;
    cout << "input an integer: ";
    cin >> n;
    return n;
}

void insert_to_begining(int n)
{
//     old style
//    Node* temp = (Node*)malloc(sizeof(Node));
//    (*temp).a = 2;
//    (*temp).next = NULL;

    Node* temp = new Node();
    temp->data = n;
    temp->next = head;
    temp->prev = NULL;

    if(head==NULL)
    {

    }
    else
    {
        head->prev= temp;
    }

    head = temp;

    if(tail==NULL)  //at first node head and tail are same
    {
        tail = head;
    }

//    return temp;

}

void insert_to_end(int n)
{
//    Node* it = head;
//    while(it->next!=NULL)
//    {
//        it = it->next;
//    }

    Node* it = tail;

    Node* temp = new Node();
    temp->data = n;
    temp->next = NULL;
    temp->prev = it;
    it->next = temp;

    tail = temp;

}

void insert_to_a_position(int n,int pos)
{
    if(pos==0)
    {
        return insert_to_begining(n);
    }

    Node* it = head;
    for(int i=0; i<pos-1; i++)
    {
        it = it->next;  //iterate and search just back address
    }
    if(it->next==NULL)
    {
        return insert_to_end(n);
    }

    Node* temp = new Node();    // temp will be inserted
    temp->data = n;
    temp->next = it->next;
    temp->prev = it;
    it->next = temp;
    it = it->next->next;
    //temp->next->prev = temp;
    it->prev = temp;

//    return head;

}

void delete_from_begining()
{
    Node* temp = head;
    head = head->next;
    head->prev = NULL;
    free(temp);

//    return head;

}
void delete_from_end()
{
    Node* temp = tail;
    tail = tail->prev;
    tail->next = NULL;
    free(temp);

}
void delete_from_a_position(int pos)
{
    if(pos==0)
    {
        return delete_from_begining();
    }

    Node* it = head;
    for(int i=0; i<pos-1; i++)
    {
        it = it->next; //iterate and search just back address
    }

    if(it->next==NULL)
    {
        return delete_from_end();
    }

    Node* temp = it->next;
    it->next = temp->next;
    temp->next->prev = it;
    free(temp);

//    return head;

}

void print()
{
//    for(Node* it=head; it!=NULL; it=it->next)
//    {
//        cout << it->data << " ";
//    }

    Node* it = head;
    while(it!=NULL)
    {
        cout << it->data << " ";

        //cout << it << endl;
        //cout << it->prev << " " << it->data << " "<< it->next << endl;

        it = it->next;
    }
    cout << endl;
}

void print_reverse_iterate()
{

    Node* it = tail;
    while(it!=NULL)
    {
        cout << it->data << " ";
        it = it->prev;
    }
    cout << endl;
}




/*

Sample Input

Sample Output


*/
