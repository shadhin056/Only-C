//linked list
//ll - global head
//working fine
//xplo

#include<cstdio>
#include<iostream>
#include<cstdlib>
#include <cstring>
#include <cstdlib>
#include <conio.h>

#define max 100

using namespace std;


struct Node
{
    int data;
    Node* next;

};

Node* head;

/*--------------- Prototype -----------------*/

void menu();
void print_menu();
int input_int();
void insert_to_begining(int n);
void insert_to_end(int n);
void insert_to_a_position(int n,int pos);
void delete_from_begining();
void delete_from_end();
void delete_from_a_position(int pos);
void reverse_iterate();
void print();
void print_reverse_recurssion(Node* it);

/*------------------------------------------*/


int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    head=NULL;

    int n,pos;

    insert_to_begining(1);
    print();

    insert_to_end(2);
    insert_to_end(3);
    insert_to_end(4);
    insert_to_end(5);
    print();

    delete_from_begining();
    print();

    delete_from_end();
    print();

    delete_from_a_position(2);
    print();

    reverse_iterate();
    print();

    print_reverse_recurssion(head);


    //menu();

    return 0;
}



void print_menu()
{
    cout << "\a\n";
    cout << "\n\t   | MENU";
    cout << "\n\t---|-----------";
    cout << "\n\t   |";

    cout << "\n\t\t1. Insert to Begining";
    cout << "\n\t\t2. Insert to End";
    cout << "\n\t\t3. Insert to a position";
    cout << "\n\t\t4. Delete from Begining";
    cout << "\n\t\t5. Delete from End";
    cout << "\n\t\t6. Delete from a position";
    cout << "\n\t\t7. Print the list";
    cout << "\n\t\t0. EXIT!!";

    cout << "\n\t\t\t       |";
    cout << "\n\t\t\t-------|---";
    cout << "\n\t\t\t       | ";
}

void menu()
{

    int n,pos;
    while(true)
    {

        int m;
        print_menu();

        cin >> m;
        cin.ignore(10,'\n');

        system("cls");
        switch(m)
        {
        case 1:
            n = input_int();
            //cout << n << endl;
            insert_to_begining(n);
            print();
            break;

        case 2:
            n = input_int();
            insert_to_end(n);
            print();
            break;

        case 3:
            cout << "Enter (integer:position) : ";
            cin >> n >> pos;

            insert_to_a_position(n,pos);
            print();
            break;

        case 4:

            delete_from_begining();
            print();
            break;
        case 5:

            delete_from_end();
            print();
            break;
        case 6:
            cout << "Enter position: ";
            cin >> pos;
            delete_from_a_position(pos);
            print();
            break;
        case 7:
            print();
            break;

        }

        if(m==0)
            break;

//        cout << "\n\tPress any key to continue... ";
//        getch();
//
//        system("cls");


    }
}




int input_int()
{
    int n;
    cout << "input an integer: ";
    cin >> n;
    return n;
}

void insert_to_begining(int n)
{
//     old style
//    Node* temp = (Node*)malloc(sizeof(Node));
//    (*temp).a = 2;
//    (*temp).next = NULL;

    Node* temp = new Node();
    temp->data = n;
    temp->next = head;

    head = temp;
//    return temp;

}

void insert_to_end(int n)
{
    Node* temp = new Node();
    temp->data = n;
    temp->next = NULL;

    Node* it = head;
    while(it->next!=NULL)
    {
        it = it->next;
    }
    it->next = (Node*)temp;

}

void insert_to_a_position(int n,int pos)
{
    if(pos==0)
    {
        return insert_to_begining(n);
    }

    Node* temp = new Node();    // temp will be inserted
    temp->data = n;

    Node* it = head;
    for(int i=0; i<pos-1; i++)
    {
        it = it->next;  //iterate and search just back address
    }
    temp->next = it->next;
    it->next = temp;

    head = temp;
//    return head;

}

void delete_from_begining()
{
    Node* it = head;
    head = it->next;
    free(it);


//    return head;

}
void delete_from_end()
{
    Node* it = head;
    Node* temp;

    while(it->next!=NULL)
    {
        temp = it;
        it = it->next;
    }

    temp->next = NULL;
    //cout << it << " " <<  it->data << endl;

    free(it);
//    it = NULL;
//    it->data = 44;
    //return head;
}
void delete_from_a_position(int pos)
{
    if(pos==0)
    {
        return delete_from_begining();
    }

    Node* it = head;
    for(int i=0; i<pos-1; i++)
    {
        it = it->next; //iterate and search just back address
    }

    Node* temp = it->next;
    it->next = temp->next;
    free(temp);

//    return head;

}

void print()
{
//    for(Node* it=head; it!=NULL; it=it->next)
//    {
//        cout << it->data << " ";
//    }

    Node* it=head;
    while(it!=NULL)
    {
        cout << it->data << " ";
        it = it->next;
    }
    cout << endl;
}

void print_reverse_recurssion(Node* it)
{
    if(it==NULL)
    {
        cout << endl;
        return;
    }
    print_reverse_recurssion(it->next);
    cout << it->data << " ";


}

void reverse_iterate()
{
    Node* it = head;
    Node* temp;
    Node* pastAddress = NULL;

    while(it!=NULL)
    {

//        cout << "before" << endl;
//        cout << it << " " << it->data << " " << it->next << endl;

        temp = it;
        it = it->next;

        temp->next = pastAddress;
        pastAddress = temp;

        //cout << "after" << endl;
        //cout << it << " " << it->data << " " << it->next << endl;

    }
    head = temp;

//    return temp;
}



/*

Sample Input

Sample Output


*/
