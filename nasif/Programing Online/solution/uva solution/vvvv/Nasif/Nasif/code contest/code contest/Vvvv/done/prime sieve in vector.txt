//My function
//prime sieve in vector
//Xplosive
//ns

#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

//-----------------------------------------

bool is_prime(int n)
{
    if(n<=1)
        return false;
    if(n==2)
        return true;
    if(n%2==0)
        return false;

    int d;

    //int l=sqrt(n);
    //for (d=3;d<=l; d+=2)
    //for (d=3; d*d<=n ; d+=2)      //this is faster
    {
        if(n%d==0)
            return false;
    }

    return true;

}
//-----------------------------------------

vector <int> get_store_prime(int r)
{
//this will return a int vector with stored prime number
//upto r using is_prime

    vector <int> prime;
    prime.push_back(2);

    for(i=3; i<r; i+=2)
    {
        if(is_prime(i))
            prime.push_back(i);
    }

    return prime;

}

//-----------------------------------------

int main()
{

    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    vector <int> all_prime;

    all_prime = get_prime(31621);

    int l= all_prime.size();
    cout << l << endl;

    for(int i=0; i< l; i++)
    {
        cout << all_prime[i] << endl;
    }






    return 0;
}


/*



*/
